openapi: 3.0.0
info:
  title: IQBuddy API
  description: IQBuddy API Resources
  version: 1.0.0
servers:
  - url: https://iqbuddy.convogrid.ai/v1
  
paths:
  /oauth2/token:
      post:
        summary: Authentication 
        tags:
          - Authentication
        requestBody:
          description: Token Request
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Oauth2TokenRequest'
        responses:
            200:
              description: Token Request
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Oauth2TokenResponse"
                        
          
  /open-ai/conversations:
      post:
        summary: Conversation with OpenAI model
        tags:
          - OpenAI
        security:
          - bearerAuth:
              - conversation:create
        parameters:
        - in: header
          name: correlation-id
          schema:
            type: string
            format: uuid
        requestBody:
          description: Conversation Request
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIConversationsRequest'
        responses:
            200:
              description: Conversation Response
              content:
                application/json:
                  schema:
                    type: object
                    properties: 
                      status:
                        enum: ["success","error"]
                        example: success
                      data:
                        $ref: "#/components/schemas/OpenAIConversationsResponse"
            400:
              description: Invalid request
              content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/BadRequestResponse"
            401:
              description: User authentication failed
              content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/UnauthenticatedResponse"
        
            403:
              description: User authorization failed
              content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/UnauthorizedResponse"
            404:
                description: Resource not found
                content:
                  application/json:
                    schema:
                        $ref: "#/components/schemas/NotFoundResponse"
            500:
                description: Internal server failure
                content:
                  application/json:
                    schema:
                        $ref: "#/components/schemas/InternalServerErrorResponse"
                        
  /gemini/conversations:
      post:
        summary: Conversation with Gemini model
        tags:
          - Gemini
        security:
          - bearerAuth:
              - conversation:create
        parameters:
        - in: header
          name: correlation-id
          schema:
            type: string
            format: uuid
        requestBody:
          description: Conversation Request
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeminiConversationsRequest'
        responses:
            200:
              description: Conversation Response
              content:
                application/json:
                  schema:
                    type: object
                    properties: 
                      status:
                        enum: ["success","error"]
                        example: success
                      data:
                        $ref: "#/components/schemas/GeminiConversationsResponse"
            400:
              description: Invalid request
              content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/BadRequestResponse"
            401:
              description: User authentication failed
              content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/UnauthenticatedResponse"
        
            403:
              description: User authorization failed
              content:
                application/json:
                  schema:
                      $ref: "#/components/schemas/UnauthorizedResponse"
            404:
                description: Resource not found
                content:
                  application/json:
                    schema:
                        $ref: "#/components/schemas/NotFoundResponse"
            500:
                description: Internal server failure
                content:
                  application/json:
                    schema:
                        $ref: "#/components/schemas/InternalServerErrorResponse"
                        
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
  schemas:
  
    Oauth2TokenRequest:
      description: Authentication token request
      type: object
      properties:
        client_id:
          type: string
          example: "3ODkwIiwibmFtZSI6Ikpva"
        client_secret:
          type: string
          example: "3ODkwIiwibmFtZSI6Ikpva"
        grant_type:
          enum: ["client_credentials"]
          example: "client_credentials"
        scope:
          enum: ["conversation:create","profile"]
          example: "profile&conversation:create"
      required:
        - client_id
        - client_secret
        - grant_type
        - scope
          
    Oauth2TokenResponse:
      description: Authentication token response
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        token_type:
          enum: ["Bearer"]
          example: Bearer
        expires_in:
          type: number
          format: int32
          example: 3600
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        scope:
          enum: ["conversation:create","profile"]
          example: "profile&conversation:create"
      required:
        - access_token
        - token_type
        - expires_in
        
    OpenAIConversationsRequest:
      description: Conversation Requests to Open AI.
      type: object
      properties:
         conversationRequests:
          type: array
          items:
            $ref: "#/components/schemas/OpenAIConversionRequest"
      required:
        - conversationRequests
      
    OpenAIConversationsResponse:
      description: Conversation Results from Open AI.
      type: object
      properties: 
        conversationRequests:
          type: array
          items:
            $ref: "#/components/schemas/OpenAIConversionRequest"
        conversationResponses:
          type: array
          items:
            $ref: "#/components/schemas/OpenAIConversionResponse"
      required:
        - conversationRequests
        - conversationResponses
    
    OpenAIConversionRequest:
      description: Conversation request to OpenAI.
      type: object
      properties: 
        conversationId:
          type: string
          format: uuid
          example: 3165db2a-6dfa-400e-971c-0fadb4c1114d
        request:
          type: string
          example: What does ConvoGrid do?
      required:
        - conversationId
        - request
          
    OpenAIConversionResponse:
      description: Conversation response from OpenAI.
      type: object
      properties: 
        conversationId:
          type: string
          format: uuid
          example: 3165db2a-6dfa-400e-971c-0fadb4c1114d
        response:
          type: string
          example: Pioneering the New Age of Conversational Experiences
          nullable: true
      required:
        - conversationId
        - response
          
    GeminiConversationsRequest:
      description: Conversation Requests to Gemini.
      type: object
      properties:
         conversationRequests:
          type: array
          items:
            $ref: "#/components/schemas/GeminiConversionRequest"
      required:
        - conversationRequests
    
    GeminiConversationsResponse:
      description: Conversation Results from Gemini.
      type: object
      properties: 
        conversations:
          type: array
          items:
            $ref: "#/components/schemas/GeminiConversion"
      required:
        - conversations
      
    GeminiConversionRequest:
      description: Conversation request to OpenAI.
      type: object
      properties: 
        conversationId:
          type: string
          format: uuid
          example: 3165db2a-6dfa-400e-971c-0fadb4c1114d
        request:
          type: string
          example: What does ConvoGrid do? 
      required:
        - conversationId
        - request
        
    GeminiConversion:
      description: Conversation response from OpenAI.
      type: object
      properties: 
        conversationId:
          type: string
          format: uuid
          example: 3165db2a-6dfa-400e-971c-0fadb4c1114d
        request:
          type: string
          example: What does ConvoGrid do? 
        response:
          type: string
          example: Pioneering the New Age of Conversational Experiences
          nullable: true
      required:
        - conversationId
        - request
        - response
  
    UnauthenticatedResponse: 
      description: The request requires authentication.
      type: object
      properties: 
        message:
          type: string
          example: "Authorization Bearer header required"
        error:
          type: string
          example: "Unauthorized request"
        statusCode:
          type: number
          example: 401
      required:
        - message
        - error
        - statusCode
    
    UnauthorizedResponse:
      description: The requestor doesn't have necessary permission.
      type: object
      properties: 
        message:
          type: string
          example: "Insufficient scopes"
        error:
          type: string
          example: "Forbidden request"
        statusCode:
          type: number
          example: 403
      required:
        - message
        - error
        - statusCode
            
    BadRequestResponse: 
      description: The request is malformed or invalid.
      type: object
      properties: 
        message:
          oneOf:
              - $ref: '#/components/schemas/BadRequestMessage'
              - $ref: '#/components/schemas/BadRequestObject'
        error:
          type: string
          example: "Bad Request"
        statusCode:
          type: number
          example: 400
      required:
        - message
        - error
        - statusCode
    
    
    NotFoundResponse: 
      description: The resource was not found.
      type: object
      properties: 
        message:
          type: string
          example: "Cannot POST /v1/not-found"
        error:
          type: string
          example: "Not Found"
        statusCode:
          type: number
          example: 404
      required:
        - message
        - error
        - statusCode
    
    InternalServerErrorResponse: 
      description: There is an internal server error.
      type: object
      properties: 
        message:
          type: string
          example: "Internal Server Error"
        error:
          type: string
          example: "Internal Server Error"
        statusCode:
          type: number
          example: 500
      required:
        - message
        - error
        - statusCode
        
    BadRequestObject:
      description: "The error object is created based on the request object. It contains attribute names as keys and lists of errors as values."
      type: object
      
    BadRequestMessage: 
      type: string
      example: "Expected double-quoted property name in JSON at position 101"
  